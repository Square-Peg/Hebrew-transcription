service: hebrew-transcription-pipeline

plugins:
  - serverless-step-functions
  - serverless-iam-roles-per-function

provider:
  name: aws
  runtime: nodejs18.x
  region: us-east-1
  stage: ${opt:stage, 'dev'}
  stackName: hebrew-transcription-${self:provider.stage}
  memorySize: 1024
  timeout: 60
  environment:
    STAGE: ${self:provider.stage}
    S3_BUCKET: hebrew-transcription-9999-${self:provider.stage}
    STATE_MACHINE_ARN: arn:aws:states:${self:provider.region}:${aws:accountId}:stateMachine:hebrew-transcription-${self:provider.stage}
    DYNAMODB_TABLE: hebrew-transcription-state-${self:provider.stage}
    # Instance configuration
    INSTANCE_TYPE: ${env:INSTANCE_TYPE, 'g5.xlarge'}
    KEY_NAME: ${env:KEY_NAME, 'hebrew-transcription-key'}
    # AMI IDs by region (to be populated after AMI creation)
    AMI_ID_US_EAST_1: ${env:AMI_ID_US_EAST_1, 'ami-06b2065cbd2730ac9'}
    AMI_ID_US_WEST_2: ${env:AMI_ID_US_WEST_2, 'ami-0e60d436d747a8994'}
    AMI_ID_AP_SOUTHEAST_2: ${env:AMI_ID_AP_SOUTHEAST_2, 'ami-0defd8953acfdab29'}
    # Email configuration
    EMAIL_RECIPIENTS: ${env:EMAIL_RECIPIENTS, 'michael@squarepeg.vc,roy@squarepeg.vc,jordan@squarepeg.vc'}
    EMAIL_FROM: ${env:EMAIL_FROM, 'michael@squarepeg.vc'}
    SES_REGION: ${env:SES_REGION, 'us-east-1'}
    # Models configuration
    WHISPER_MODEL: ${env:WHISPER_MODEL, 'ivrit-ai/whisper-large-v3-ct2'}
    TRANSLATION_MODEL: ${env:TRANSLATION_MODEL, 'Helsinki-NLP/opus-mt-tc-big-he-en'}
    # AI Summary configuration
    AI_PROVIDER: ${env:AI_PROVIDER, 'openai'} # 'claude' or 'openai'
    AI_API_KEY: ${env:AI_API_KEY, ''}
    AI_API_KEY_SSM: '/hebrew-transcription/openai-api-key' # SSM parameter name for API key

  iam:
    role:
      statements:
        # S3 permissions
        - Effect: Allow
          Action:
            - s3:GetObject
            - s3:PutObject
            - s3:ListBucket
          Resource:
            - arn:aws:s3:::${self:provider.environment.S3_BUCKET}
            - arn:aws:s3:::${self:provider.environment.S3_BUCKET}/*
        
        # DynamoDB permissions
        - Effect: Allow
          Action:
            - dynamodb:PutItem
            - dynamodb:GetItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
            - dynamodb:Query
          Resource:
            - !GetAtt StateTable.Arn
            - !Sub "${StateTable.Arn}/index/*"
        
        # Step Functions permissions
        - Effect: Allow
          Action:
            - states:StartExecution
            - states:DescribeExecution
            - states:StopExecution
          Resource:
            - ${self:provider.environment.STATE_MACHINE_ARN}
        
        # SES permissions
        - Effect: Allow
          Action:
            - ses:SendEmail
            - ses:SendRawEmail
          Resource: '*'
          Condition:
            StringEquals:
              ses:FromAddress: ${self:provider.environment.EMAIL_FROM}

package:
  exclude:
    - ec2-scripts/**
    - .git/**
    - .gitignore
    - README.md
    - .DS_Store
    - .serverless/**

functions:
  # 1. Input Validator - Triggered by S3
  inputValidator:
    handler: src/handlers/inputValidator.handler
    timeout: 30
    events:
      - s3:
          bucket: ${self:provider.environment.S3_BUCKET}
          event: s3:ObjectCreated:*
          existing: true
          rules:
            - prefix: raw/
            - suffix: .mp3
      - s3:
          bucket: ${self:provider.environment.S3_BUCKET}
          event: s3:ObjectCreated:*
          existing: true
          rules:
            - prefix: raw/
            - suffix: .wav
      - s3:
          bucket: ${self:provider.environment.S3_BUCKET}
          event: s3:ObjectCreated:*
          existing: true
          rules:
            - prefix: raw/
            - suffix: .m4a
      - s3:
          bucket: ${self:provider.environment.S3_BUCKET}
          event: s3:ObjectCreated:*
          existing: true
          rules:
            - prefix: raw/
            - suffix: .mp4

  # 2. Instance Manager - Launches EC2
  instanceManager:
    handler: src/handlers/instanceManager.handler
    timeout: 300
    environment:
      IAM_INSTANCE_PROFILE: !Ref EC2InstanceProfile
    iamRoleStatements:
      - Effect: Allow
        Action:
          - ec2:RunInstances
          - ec2:CreateTags
          - ec2:DescribeInstances
          - ec2:DescribeInstanceStatus
          - ec2:TerminateInstances
          - ec2:DescribeVpcs
          - ec2:DescribeSubnets
          - ec2:DescribeSecurityGroups
          - ec2:DescribeSpotInstanceRequests
          - ec2:RequestSpotInstances
          - ec2:CancelSpotInstanceRequests
        Resource: '*'
      - Effect: Allow
        Action:
          - iam:PassRole
        Resource: !GetAtt EC2Role.Arn
      - Effect: Allow
        Action:
          - dynamodb:PutItem
          - dynamodb:GetItem
          - dynamodb:UpdateItem
          - dynamodb:DeleteItem
          - dynamodb:Query
        Resource:
          - !GetAtt StateTable.Arn
          - !Sub "${StateTable.Arn}/index/*"

  # 3. Status Monitor - Polls for completion
  statusMonitor:
    handler: src/handlers/statusMonitor.handler
    timeout: 60

  # 4. Email Sender - Sends results
  emailSender:
    handler: src/handlers/emailSender.handler
    timeout: 180  # Increased for AI API calls
    environment:
      MAX_ATTACHMENT_SIZE: 10485760  # 10MB
    iamRoleStatements:
      - Effect: Allow
        Action:
          - ssm:GetParameter
          - ssm:GetParametersByPath
        Resource:
          - !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/*'
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource:
          - !GetAtt StateTable.Arn
      - Effect: Allow
        Action:
          - s3:GetObject
        Resource:
          - arn:aws:s3:::${self:provider.environment.S3_BUCKET}/*
      - Effect: Allow
        Action:
          - ses:SendEmail
          - ses:SendRawEmail
        Resource: '*'
        Condition:
          StringEquals:
            ses:FromAddress: ${self:provider.environment.EMAIL_FROM}

  # 5. Cleanup Handler - Post-processing
  cleanupHandler:
    handler: src/handlers/cleanupHandler.handler
    timeout: 60

  # 6. Error Handler - Handles failures
  errorHandler:
    handler: src/handlers/errorHandler.handler
    timeout: 60

  # Hebrew Audio Upload URL Generator
  hebrewAudioUploadUrl:
    handler: src/handlers/hebrewAudioUploadUrl.handler
    memorySize: 512
    timeout: 30
    description: Generate pre-signed URLs for Hebrew audio uploads from Audio Hijack
    environment:
      S3_BUCKET: ${self:provider.environment.S3_BUCKET}
    events:
      - http:
          path: /hebrew-audio/upload-url
          method: POST
          cors: true
          private: true  # This requires API key
      - http:
          path: /hebrew-audio/upload-url
          method: OPTIONS
          cors: true
    iamRoleStatementsName: hebrew-audio-upload-${self:provider.stage}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - s3:PutObject
          - s3:PutObjectAcl
          - s3:PutObjectTagging
        Resource:
          - arn:aws:s3:::${self:provider.environment.S3_BUCKET}/raw/*

stepFunctions:
  stateMachines:
    transcriptionPipeline:
      name: hebrew-transcription-${self:provider.stage}
      definition:
        Comment: "Hebrew audio transcription pipeline"
        StartAt: ValidateInput
        States:
          ValidateInput:
            Type: Task
            Resource: !GetAtt InputValidatorLambdaFunction.Arn
            ResultPath: $.validation
            Next: CheckExistingInstance
            Retry:
              - ErrorEquals: ["States.TaskFailed"]
                IntervalSeconds: 2
                MaxAttempts: 2
                BackoffRate: 2
            Catch:
              - ErrorEquals: ["States.ALL"]
                Next: HandleError
                ResultPath: $.error

          CheckExistingInstance:
            Type: Task
            Resource: !GetAtt InstanceManagerLambdaFunction.Arn
            Parameters:
              action: "check"
              id.$: $.id
              s3Key.$: $.s3Key
              s3Bucket.$: $.s3Bucket
            ResultPath: $.instanceCheck
            Next: InstanceDecision

          InstanceDecision:
            Type: Choice
            Choices:
              - Variable: $.instanceCheck.hasRunning
                BooleanEquals: true
                Next: NormalizeInstanceState
            Default: LaunchInstance

          NormalizeInstanceState:
            Type: Pass
            Parameters:
              instanceId.$: "$.instanceCheck.instances[0].instanceId"
              region.$: "$.instanceCheck.region"
              type: "pre-existing"
            ResultPath: "$.instance"
            Next: WaitForProcessing

          LaunchInstance:
            Type: Task
            Resource: !GetAtt InstanceManagerLambdaFunction.Arn
            Parameters:
              action: "launch"
              id.$: $.id
              s3Key.$: $.s3Key
              s3Bucket.$: $.s3Bucket
              validation.$: $.validation
            ResultPath: $.launchResult
            Next: NormalizeLaunchResult
            Retry:
              - ErrorEquals: ["InsufficientInstanceCapacity"]
                IntervalSeconds: 300
                MaxAttempts: 12
                BackoffRate: 1
              - ErrorEquals: ["States.TaskFailed"]
                IntervalSeconds: 30
                MaxAttempts: 3
                BackoffRate: 2
            Catch:
              - ErrorEquals: ["States.ALL"]
                Next: HandleError
                ResultPath: $.error

          NormalizeLaunchResult:
            Type: Choice
            Choices:
              - Variable: $.launchResult.instanceId
                IsPresent: true
                Next: SetLaunchInstance
              - Variable: $.launchResult.hasRunning
                BooleanEquals: true
                Next: ExtractSkippedInstance
            Default: HandleError

          ExtractSkippedInstance:
            Type: Pass
            Parameters:
              instanceId.$: "$.launchResult.instances[0].instanceId"
              region.$: "$.launchResult.region"
              type: "pre-existing-skipped"
            ResultPath: "$.instance"
            Next: WaitForProcessing

          SetLaunchInstance:
            Type: Pass
            Parameters:
              instanceId.$: "$.launchResult.instanceId"
              region.$: "$.launchResult.region"
              type.$: "$.launchResult.type"
            ResultPath: "$.instance"
            Next: WaitForProcessing

          WaitForProcessing:
            Type: Wait
            Seconds: 60
            Next: CheckProgress

          CheckProgress:
            Type: Task
            Resource: !GetAtt StatusMonitorLambdaFunction.Arn
            Parameters:
              id.$: $.id
              s3Key.$: $.s3Key
              s3Bucket.$: $.s3Bucket
              instanceId.$: $.instance.instanceId
            ResultPath: $.status
            Next: ProcessingComplete?

          ProcessingComplete?:
            Type: Choice
            Choices:
              - Variable: $.status.isComplete
                BooleanEquals: true
                Next: SendEmail
              - Variable: $.status.isFailed
                BooleanEquals: true
                Next: PrepareError
              - Variable: $.status.elapsedMinutes
                NumericGreaterThan: 1440  # 24 hours - for very large files
                Next: HandleTimeout
            Default: WaitForProcessing

          PrepareError:
            Type: Pass
            Parameters:
              Cause.$: $.status.error
              Error: "ProcessingFailed"
            ResultPath: $.error
            Next: HandleError

          SendEmail:
            Type: Task
            Resource: !GetAtt EmailSenderLambdaFunction.Arn
            Parameters:
              id.$: $.id
              s3Key.$: $.s3Key
              s3Bucket.$: $.s3Bucket
              outputKey.$: $.status.outputKey
              transcriptKey.$: $.status.transcriptKey
              processingTime.$: $.status.processingTime
            ResultPath: $.email
            Next: Cleanup
            Retry:
              - ErrorEquals: ["States.TaskFailed"]
                IntervalSeconds: 5
                MaxAttempts: 3
                BackoffRate: 2
            Catch:
              - ErrorEquals: ["States.ALL"]
                Next: Cleanup
                ResultPath: $.emailError

          Cleanup:
            Type: Task
            Resource: !GetAtt CleanupHandlerLambdaFunction.Arn
            Parameters:
              id.$: $.id
              s3Key.$: $.s3Key
              s3Bucket.$: $.s3Bucket
              instanceId.$: $.instance.instanceId
              region.$: $.instance.region
              success: true
            End: true

          HandleError:
            Type: Task
            Resource: !GetAtt ErrorHandlerLambdaFunction.Arn
            Parameters:
              id.$: $.id
              s3Key.$: $.s3Key
              s3Bucket.$: $.s3Bucket
              error.$: $.error
            Next: CleanupError

          HandleTimeout:
            Type: Task
            Resource: !GetAtt ErrorHandlerLambdaFunction.Arn
            Parameters:
              id.$: $.id
              s3Key.$: $.s3Key
              s3Bucket.$: $.s3Bucket
              error:
                Cause: "Processing timeout exceeded"
                Error: "ProcessingTimeout"
            Next: CleanupError

          CleanupError:
            Type: Task
            Resource: !GetAtt CleanupHandlerLambdaFunction.Arn
            Parameters:
              id.$: $.id
              s3Key.$: $.s3Key
              s3Bucket.$: $.s3Bucket
              instanceId.$: $.instance.instanceId
              region.$: $.instance.region
              success: false
            End: true

resources:
  Resources:
    # S3 Bucket
    TranscriptionBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.S3_BUCKET}
        LifecycleConfiguration:
          Rules:
            - Id: DeleteErrorFiles
              Status: Enabled
              ExpirationInDays: 30
              Prefix: error/
            - Id: DeleteOldOutputs
              Status: Enabled
              ExpirationInDays: 90
              Prefix: outputs/
        PublicAccessBlockConfiguration:
          BlockPublicAcls: true
          BlockPublicPolicy: true
          IgnorePublicAcls: true
          RestrictPublicBuckets: true

    # DynamoDB Table for state tracking
    StateTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.DYNAMODB_TABLE}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: status
            AttributeType: S
          - AttributeName: timestamp
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: status-timestamp-index
            KeySchema:
              - AttributeName: status
                KeyType: HASH
              - AttributeName: timestamp
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
        TimeToLiveSpecification:
          AttributeName: ttl
          Enabled: true
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES

    # EC2 Instance Profile and Role
    EC2Role:
      Type: AWS::IAM::Role
      Properties:
        RoleName: hebrew-transcription-ec2-${self:provider.stage}
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service: ec2.amazonaws.com
              Action: sts:AssumeRole
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy
        Policies:
          - PolicyName: S3Access
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - s3:GetObject
                    - s3:PutObject
                    - s3:DeleteObject
                  Resource:
                    - arn:aws:s3:::${self:provider.environment.S3_BUCKET}/*
                - Effect: Allow
                  Action:
                    - s3:ListBucket
                  Resource:
                    - arn:aws:s3:::${self:provider.environment.S3_BUCKET}

    EC2InstanceProfile:
      Type: AWS::IAM::InstanceProfile
      Properties:
        InstanceProfileName: hebrew-transcription-profile-${self:provider.stage}
        Roles:
          - !Ref EC2Role

    # Security Groups for each region
    SecurityGroupUSEast1:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupName: hebrew-transcription-${self:provider.stage}-us-east-1
        GroupDescription: Security group for Hebrew transcription EC2 instances
        SecurityGroupIngress:
          - IpProtocol: tcp
            FromPort: 22
            ToPort: 22
            CidrIp: 0.0.0.0/0

    SecurityGroupUSWest2:
      Type: AWS::EC2::SecurityGroup
      Condition: CreateUSWest2Resources
      Properties:
        GroupName: hebrew-transcription-${self:provider.stage}-us-west-2
        GroupDescription: Security group for Hebrew transcription EC2 instances
        SecurityGroupIngress:
          - IpProtocol: tcp
            FromPort: 22
            ToPort: 22
            CidrIp: 0.0.0.0/0

    SecurityGroupAPSoutheast2:
      Type: AWS::EC2::SecurityGroup
      Condition: CreateAPSoutheast2Resources
      Properties:
        GroupName: hebrew-transcription-${self:provider.stage}-ap-southeast-2
        GroupDescription: Security group for Hebrew transcription EC2 instances
        SecurityGroupIngress:
          - IpProtocol: tcp
            FromPort: 22
            ToPort: 22
            CidrIp: 0.0.0.0/0

    # API Key for Hebrew Audio Uploads
    HebrewAudioUploadApiKey:
      Type: AWS::ApiGateway::ApiKey
      DependsOn: ApiGatewayDeployment${sls:instanceId}
      Properties:
        Name: hebrew-audio-upload-key-${self:provider.stage}
        Description: API key for Hebrew audio uploads from Audio Hijack
        Enabled: true
        StageKeys:
          - RestApiId: !Ref ApiGatewayRestApi
            StageName: ${self:provider.stage}
    
    # Usage Plan for Hebrew Audio Uploads
    HebrewAudioUploadUsagePlan:
      Type: AWS::ApiGateway::UsagePlan
      DependsOn: ApiGatewayDeployment${sls:instanceId}
      Properties:
        UsagePlanName: hebrew-audio-upload-plan-${self:provider.stage}
        Description: Usage plan for Hebrew audio uploads
        ApiStages:
          - ApiId: !Ref ApiGatewayRestApi
            Stage: ${self:provider.stage}
        Throttle:
          BurstLimit: 100      # Max requests in a burst
          RateLimit: 50        # Requests per second
        Quota:
          Limit: 10000         # Requests per day
          Period: DAY
    
    # Link API Key to Usage Plan
    HebrewAudioUploadUsagePlanKey:
      Type: AWS::ApiGateway::UsagePlanKey
      Properties:
        KeyId: !Ref HebrewAudioUploadApiKey
        KeyType: API_KEY
        UsagePlanId: !Ref HebrewAudioUploadUsagePlan

  Conditions:
    CreateUSWest2Resources: !Equals [ "${self:provider.stage}", "prod" ]
    CreateAPSoutheast2Resources: !Equals [ "${self:provider.stage}", "prod" ]

  Outputs:
    BucketName:
      Value: !Ref TranscriptionBucket
      Export:
        Name: ${self:provider.stackName}-bucket
    
    HebrewAudioUploadApiUrl:
      Value: !Sub 'https://${ApiGatewayRestApi}.execute-api.${AWS::Region}.amazonaws.com/${self:provider.stage}/hebrew-audio/upload-url'
      Description: API endpoint for Hebrew audio upload URL generation
      Export:
        Name: ${self:provider.stackName}-hebrew-audio-upload-url